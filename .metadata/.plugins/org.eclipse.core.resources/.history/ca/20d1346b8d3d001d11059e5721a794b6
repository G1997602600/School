package ty.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import ty.dto.Student;


public class StudentDao {
	String path = "com.mysql.cj.jdbc.Driver";
	String url = "jdbc:mysql://localhost:3306/jdbc_school";
	String user = "root";
	String password = "root";
	Connection connection = null;

	public String addStudent(Student u) {
		String query = "INSERT INTO student VALUES (?,?,?,?)";
		try {
			Class.forName(path);
			connection = DriverManager.getConnection(url, user, password);
			PreparedStatement preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, u.getId());
			preparedStatement.setString(2, u.getName());
			preparedStatement.setInt(3, u.getAge());
			preparedStatement.setLong(4, u.getPhone());
			int a = preparedStatement.executeUpdate();
			if (a == 1) {
				return "saved";
			}
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return "not saved";
	}

	public String updateStudent(Student u) {
		String query = "update student set name=?,age=?,phone=? where id=?";
		try {
			Class.forName(path);
			connection = DriverManager.getConnection(url, user, password);
			PreparedStatement preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(4, u.getId());
			preparedStatement.setString(1, u.getName());
			preparedStatement.setInt(2, u.getAge());
			preparedStatement.setLong(3, u.getPhone());
			
			int a = preparedStatement.executeUpdate();
			if (a == 1) {
				return "updated successfully";
			}
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return "not updated successfully";
	}

	public String deleteStudent(int id) {
		String query="delete from student where id=? ";
		try {
			connection=DriverManager.getConnection(url,user,password);
			PreparedStatement preparedStatement=connection.prepareStatement(query);
			preparedStatement.setInt(1, id);
			int a=preparedStatement.executeUpdate();
			if (a==1) {
				return "deleted successfully";
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return "not deleted";
	}
	
	
	public List<Student> getAllStudent()
	{
		String query="select * from student";
		ResultSet resultSet=null;
		
		try {
			Class.forName(path);
			connection=DriverManager.getConnection(url,user,password);
			PreparedStatement preparedStatement=connection.prepareStatement(query);
			 resultSet=preparedStatement.executeQuery();
			 if(resultSet!=null)
			 {
				 List<Student> list=new ArrayList<Student>();
				while (resultSet.next()) {
					Student student=new Student();
					student.setId(resultSet.getInt(1));
					student.setName(resultSet.getString(2));
					student.setAge(resultSet.getInt(3));
					student.setPhone(resultSet.getLong(4));
					list.add(student);
				}
				return list;
			 }
		}catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
	public Student getStudent(int id)   {
		String query="select * from student where id=?";
		ResultSet resultSet=null;
		
		try {
			Class.forName(path);
			connection=DriverManager.getConnection(url,user,password);
			PreparedStatement preparedStatement=connection.prepareStatement(query);
			preparedStatement.setInt(1, id);
			 resultSet=preparedStatement.executeQuery();
			 if(resultSet!=null)
			 {
				while (resultSet.next()) {
					Student student=new Student();
					student.setId(resultSet.getInt(1));
					student.setName(resultSet.getString(2));
					student.setAge(resultSet.getInt(3));
					student.setPhone(resultSet.getLong(4));
					return student;
				}
			 }
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				connection.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return null;
	}
		

}
